@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

class RegisterGreenSpaceUI{
-name: String;
-size: Size;
-area: double;
-greenSpace: GreenSpace

+RegisterGreenSpaceUI()
-requestData()
-requestName()
-requestArea()
-submitData()
-printGreenSpace()
}

class RegisterGreenSpaceController{

    +RegisterGreenSpaceController()
    +RegisterGreenSpaceController(AuthenticationRepository authenticationRepository)
    +getGreenSpaceRepository() : GreenSpaceRepository
    -getAuthenticationRepository() : AuthenticationRepository
    +registerGreenSpace(String name, double area, GreenSpace.Size size ) : GreenSpace
}

class Repositories{
    - Repositories()
    + getInstance() : Repositories
    + getGreenSpaceRepository() : GreenSpaceRepository
}

class GreenSpace{
    -name: String
    -area: double
    -size: Size

    +GreenSpace(String name, double area, Size size)
    +validateGreenSpaceName(String greenSpaceName)
    +getName(): String
    +equals(Object o)
    +toString() : String
}

class ToDoListUI{

}


class ToDoListController{

}

class ToDoList{

+ToDoList()
+getInstance() : ToDoList
+addEntry(Entry entry)
+List<Entry> getToDoList()
}
class AgendaUI{
-name: String;
-size: Size;
-area: double;
-greenSpace: GreenSpace

+RegisterGreenSpaceUI()
-requestData()
-requestName()
-requestArea()
-submitData()
-printGreenSpace()
}

class AgendaController{

    +RegisterGreenSpaceController()
    +RegisterGreenSpaceController(AuthenticationRepository authenticationRepository)
    +getGreenSpaceRepository() : GreenSpaceRepository
    -getAuthenticationRepository() : AuthenticationRepository
    +registerGreenSpace(String name, double area, GreenSpace.Size size ) : GreenSpace
}

class AssignTeamToEntryController {
    -teamRepository: TeamRepository
    +AssignTeamToEntryController()
    +getTeams(): List<Team>
    +getTeams(index: int): Team
    -getTeamRepository(): TeamRepository
}

class AssignTeamToEntryUI {

}

class TeamRepository {
    -teams: List<Team>
    +getTeams(): List<Team>
    +getTeams(index: int): Team
}


interface EmailSenderInterface {
    +sendEmail(entry: Entry)
}

class Mailer {
    +sendEmail(entry: Entry)
}


class CancelEntryUI{
-name: String;
-size: Size;
-area: double;
-greenSpace: GreenSpace

+RegisterGreenSpaceUI()
-requestData()
-requestName()
-requestArea()
-submitData()
-printGreenSpace()
}


class AgendaRepository{
    -name: String
    -area: double
    -size: Size
    -entries: List<Entry>

    +getEntries(): List<Entry>
    +getEntries(index: int): Entry
    +GreenSpace(String name, double area, Size size)
    +validateGreenSpaceName(String greenSpaceName)
    +getName(): String
    +equals(Object o)
    +toString() : String
}

class PostponeEntryUI{
-name: String;
-size: Size;
-area: double;
-greenSpace: GreenSpace

+RegisterGreenSpaceUI()
-requestData()
-requestName()
-requestArea()
-submitData()
-printGreenSpace()
}


class AssignVehicleToEntryController {
    -vehicleRepository: VehicleRepository
    +AssignVehicleToEntryController()
    +getVehicles(): List<Vehicle>
    +getVehicles(index: int): Vehicle
    -getVehicleRepository(): VehicleRepository
}

class AssignVehicleToEntryUI {

}

class VehicleRepository {
    -vehicles: List<Vehicle>
    +getVehicles(): List<Vehicle>
    +getVehicles(index: int): Vehicle
}



class GreenSpaceListUI{
    -managerName: String
    -greenSpaceRepository: GreenSpaceRepository
    -greenSpaceListController: GreenSpaceListController;
    +GreenSpaceListUI()
    -listGreenSpaces()
    -sortGreenSpaces()
}

class GreenSpaceListController{
    -greenSpaceRepository: GreenSpaceRepository
    -organization: Organization
    -repositories: Repositories
    +GreenSpaceListController(managerName: String)
    -getGreenSpaceRepository()
    -getSortingAlgorithm()
}

class Organization{
    - userName: String
    - GreenSpaces : List<GreenSpace>
    - name: String
    - agenda: List<Entry>
}

class GreenSpace{
    - name: String
    - area: double
    - size: Size
    - managerName: String
    + GreenSpace(name: String, area: double, size: Size, managerName: String)
    + getName()
    + getManagerName()
    + getArea()
}

class GreenSpaceRepository{
    - GreenSpaces : List<GreenSpace>
    + getGreenSpaces() : List<GreenSpace>
}


class TaskAssignedToCollaboratorUI{
    - managerName: String
    - controller: TaskAssignedToCollaboratorController
    + requestData()
}

class TaskAssignedToCollaboratorController{
    - agendaRepository: AgendaRepository
    - managerName: String
    + TaskAssignedToCollaboratorController(managerName: String)
    +getEntriesBetweenDates(startDate: LocalDate, endDate: LocalDate,status: String, name: String)
}

class OrganizationRepository{
    + getUserName()
    + getUserName()
    +getOrganization(): Organization


}

class Entry{
    - task: String
    - urgency: Urgency
    - duration: int
    - greenSpace: GreenSpace
    - status: Status
    - startDate: LocalDate
    - endDate: LocalDate
    - team: Team
    + Entry(task: String, urgency: Urgency, duration: int, greenSpace: GreenSpace, status: Status)
    + getTask()
    + getUrgency()
    + getDuration()
    + getGreenSpace()
    + getStatus()
    + getStartDate()
    + getEndDate()
    + getTeam()
}


class CompletionTaskUI{
    - agenda: AgendaRepository
    - completionTaskController: CompletionTaskController
    + CompletionTaskUI()
    + requestData()
    + submitData()
}

class CompletionTaskController{
    - agenda: AgendaRepository
    + CompletionTaskController()
    + markAsCompleted(entry: Entry)
    + getEntries()
}

AgendaController ..> Repositories : repositories
AgendaController "1" --> Organization
AgendaUI ..> AgendaController : controller
AssignTeamToEntryController  ..>  OrganizationRepository
AssignTeamToEntryController  ..>  TeamRepository : TeamRepository
AssignTeamToEntryController  ..>  Organization : organization
AssignTeamToEntryController  ..> AgendaRepository : AgendaRepository
AssignTeamToEntryUI ..>  AssignTeamToEntryController
AssignVehicleToEntryController  ..>  OrganizationRepository
AssignVehicleToEntryController  ..>  VehicleRepository : VehicleRepository
AssignVehicleToEntryController  ..>  Organization : organization
AssignVehicleToEntryController  ..> AgendaRepository : AgendaRepository
AssignVehicleToEntryUI ..>  AssignVehicleToEntryController
AssignTeamToEntryController  ..>  EmailSenderInterface : emailSender

CancelEntryUI ..> AgendaController : controller
CompletionTaskController ..> Organization
CompletionTaskController ..> Repositories: repositories
CompletionTaskUI ..> CompletionTaskController
EmailSenderInterface <|-- Mailer
GreenSpaceListController ..> Organization
GreenSpaceListController ..> Repositories: repositories
GreenSpaceListUI ..> GreenSpaceListController
Organization --> AgendaRepository : has entry
Organization "1" --> "1" ToDoList: has information
Organization "1" --> "1..*" GreenSpace:greenSpace
Organization "1" --> "1..*"Entry: entry
GreenSpaceRepository "1" --> "1" Organization : greenSpace
OrganizationRepository "1" --> "1" Organization : has manager
PostponeEntryUI ..> AgendaController : controller
Repositories "1" --> "1" AgendaRepository: agendaRepository
Repositories "1" --> "1" GreenSpaceRepository: greenSpaceRepository
Repositories "1" --> "1" OrganizationRepository: organizationRepository
Repositories --> Repositories : getInstance()
Repositories --> ToDoList : list of entries
RegisterGreenSpaceController ..> Repositories : repositories
RegisterGreenSpaceController "1" --> Organization
RegisterGreenSpaceUI ..> RegisterGreenSpaceController : controller
TaskAssignedToCollaboratorController ..> Organization
TaskAssignedToCollaboratorController ..> Repositories: repositories
TaskAssignedToCollaboratorUI ..> TaskAssignedToCollaboratorController
TeamRepository  -->  Organization : gets team
ToDoListController ..> Repositories : repositories
ToDoListController --> Organization
ToDoListUI ..> ToDoListController
VehicleRepository  -->  Organization : gets vehicle


@enduml
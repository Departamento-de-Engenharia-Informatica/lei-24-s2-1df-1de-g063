@startuml

class AssignTeamToEntryController{
   +CreateAssignTeamToEntryController()
    +getTeams(): List<Team>
    +getTeams(index: int): Team
    +getEntries(): List<Entry>
    +getEntries(index: int): Entry
    +assignTeamToEntry(team: Team, entry: Entry)
}

class AssignTeamToEntryUI {

}

class Repositories {
    -instance: Repositories
    +getInstance(): Repositories
    +getTeamRepository(): TeamRepository
    +getAgendaRepository(): AgendaRepository
    +getVehicleRepository(): VehicleRepository
    +getOrganizationRepository(): OrganizationRepository
}

class TeamRepository {
    -teams: List<Team>
    +getTeams(): List<Team>
    +getTeams(index: int): Team
}

class AgendaRepository {
    -entries: List<Entry>
    +getEntries(): List<Entry>
    +getEntries(index: int): Entry
}

class Entry {
    -team: Team
    +setTeam(team: Team)
}

class Organization {
}

class OrganizationRepository{
    +getOrganization(): Organization
}

interface EmailSenderInterface {
    +sendEmail(entry: Entry)
}

class Mailer {
    +sendEmail(entry: Entry)
}

AssignTeamToEntryUI .>  AssignTeamToEntryController
AssignTeamToEntryController  ..>  Repositories : repositories
Repositories ..> TeamRepository : teamRepository
Repositories ..> AgendaRepository : agendaRepository
Repositories ..> OrganizationRepository : organizationRepository
Repositories -> Repositories : getInstance()
TeamRepository --> Organization : gets team
OrganizationRepository  -->  Organization : has manager
AgendaRepository  -->  Organization : gets entry
Organization "1" --> "*" Entry : sets team to entry
AssignTeamToEntryController  .>  Organization : organization
AssignTeamToEntryController  ..>  EmailSenderInterface : emailSender
EmailSenderInterface <|.. Mailer

@enduml